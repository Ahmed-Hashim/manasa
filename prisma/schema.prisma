generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  hashedPassword String
  name           String?
  role           String?
  profile        Profile?
  programs       Program[]
  comments       Comment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  bio         String?
  partyName   String?
  imageUrl    String?
  phoneNumber String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Program {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  candidateName        String?
  partyName            String?
  programDetails       String?
  vision               String?
  goals                String? // Long-term, medium-term, short-term goals
  priorities           String? // Priorities for each committee
  kpis                 String? // Performance indicators (KPIs)
  collaboration        String? // Collaboration details
  trackingMechanism    String? // Tracking and evaluation methods
  proposedPrograms     String? // W5 analysis and proposed programs
  age                  Int? // Age of the candidate
  educationLevel       String? // Education level (e.g., Bachelor's, Master's, etc.)
  image                String? // Path to the uploaded candidate image
  cv                   String? // Path to the uploaded CV (PDF)
  educationCertificate String? // Path to the uploaded education certificate (PDF)
  comments             Comment[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  User                 User?     @relation(fields: [userId], references: [id])
  userId               String?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  programId String
  program   Program  @relation(fields: [programId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteContent {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  key     String @unique
  content String
}
